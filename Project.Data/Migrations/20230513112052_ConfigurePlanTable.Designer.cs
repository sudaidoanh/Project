// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data.EF;

#nullable disable

namespace Project.Data.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20230513112052_ConfigurePlanTable")]
    partial class ConfigurePlanTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d49cad19-8d64-44fe-88ad-3e98fc3376ec"),
                            RoleId = new Guid("6755b85d-9886-4e98-89df-fe320e6febd7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Manage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6755b85d-9886-4e98-89df-fe320e6febd7"),
                            Action = "Admin",
                            ConcurrencyStamp = "52119035-c737-40f5-8733-f154478feb7a",
                            Description = "Adminstrator Role",
                            Manage = 0,
                            Name = "admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Image")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d49cad19-8d64-44fe-88ad-3e98fc3376ec"),
                            AccessFailedCount = 0,
                            Address = "Ho Chi Minh City",
                            ConcurrencyStamp = "4180b159-bcc7-447e-b35f-6d929423b81a",
                            Email = "sudaidoanh@gmail.com",
                            EmailConfirmed = true,
                            FullName = "admin",
                            Image = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "sudaidoanh@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNVccZq7Bj2h/FSk+AwijIiWQma7So5dIgJ8/vAAgX3w4WlTG1GBaqu0orVGt00MQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CD01",
                            Name = "Area 1"
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.AreaDistributor", b =>
                {
                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("DistributorId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "DistributorId");

                    b.HasIndex("DistributorId");

                    b.ToTable("AreaDistributors", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.AreaUser", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AreaId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AreaUsers", (string)null);

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            UserId = new Guid("d49cad19-8d64-44fe-88ad-3e98fc3376ec")
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Configuration", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.Distributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Distributors", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.MediaTask", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SrcFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskUserAskTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "TaskId");

                    b.HasIndex("TaskId", "TaskUserAskTaskId");

                    b.ToTable("MediaTasks", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("Receivers")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("Id", "SenderId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<Guid>("Invited")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Calendar")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("TypeDate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id", "UserId", "DistributorId", "Invited");

                    b.HasIndex("DistributorId");

                    b.HasIndex("Invited");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Display")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Manager")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id", "UserId", "Manager");

                    b.HasIndex("Manager");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("UserCreate")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id", "UserCreate");

                    b.HasIndex("UserCreate");

                    b.ToTable("Surveys", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.SurveyDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("SurveyUserCreate")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "SurveyId");

                    b.HasIndex("SurveyId", "SurveyUserCreate");

                    b.ToTable("SurveyDetails", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.Surveyed", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<Guid?>("SurveyUserCreate")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "SurveyId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("SurveyId", "SurveyUserCreate");

                    b.ToTable("Surveyeds", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.SystemActivity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemActivities", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserAskTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id", "UserAskTaskId");

                    b.HasIndex("UserAskTaskId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.TaskDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserComment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdTask")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TaskUserAskTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "UserComment");

                    b.HasIndex("UserComment");

                    b.HasIndex("TaskId", "TaskUserAskTaskId");

                    b.ToTable("TaskDetails", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CurrentSet")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("SortOder")
                        .HasColumnType("int");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages", (string)null);
                });

            modelBuilder.Entity("Project.Data.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Project.Data.Entities.AreaDistributor", b =>
                {
                    b.HasOne("Project.Data.Entities.Area", "Area")
                        .WithMany("AreaDistributors")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Distributor", "Distributor")
                        .WithMany("AreaDistributors")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("Project.Data.Entities.AreaUser", b =>
                {
                    b.HasOne("Project.Data.Entities.Area", "Area")
                        .WithMany("AreaUsers")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("AreaUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Project.Data.Entities.MediaTask", b =>
                {
                    b.HasOne("Project.Data.Entities.Task", "Task")
                        .WithMany("MediaTasks")
                        .HasForeignKey("TaskId", "TaskUserAskTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Project.Data.Entities.Notification", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Notifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.Plan", b =>
                {
                    b.HasOne("Project.Data.Entities.Distributor", "Distributor")
                        .WithMany("Plans")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Plans")
                        .HasForeignKey("Invited")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("Project.Data.Entities.Post", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.Report", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Reports")
                        .HasForeignKey("Manager")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.Survey", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Surveyes")
                        .HasForeignKey("UserCreate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.SurveyDetail", b =>
                {
                    b.HasOne("Project.Data.Entities.Survey", "Survey")
                        .WithMany("SurveyDetails")
                        .HasForeignKey("SurveyId", "SurveyUserCreate");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Project.Data.Entities.Surveyed", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Surveyeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Survey", "Survey")
                        .WithMany("Surveyeds")
                        .HasForeignKey("SurveyId", "SurveyUserCreate");

                    b.Navigation("AppUser");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Project.Data.Entities.SystemActivity", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("SystemActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.Task", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Tasks")
                        .HasForeignKey("UserAskTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.TaskDetail", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("TaskDetails")
                        .HasForeignKey("UserComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Task", null)
                        .WithMany("TaskDetails")
                        .HasForeignKey("TaskId", "TaskUserAskTaskId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.UserImage", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Project.Data.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Data.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Navigation("AreaUser");

                    b.Navigation("Notifications");

                    b.Navigation("Plans");

                    b.Navigation("Posts");

                    b.Navigation("Reports");

                    b.Navigation("Surveyeds");

                    b.Navigation("Surveyes");

                    b.Navigation("SystemActivities");

                    b.Navigation("TaskDetails");

                    b.Navigation("Tasks");

                    b.Navigation("UserImages");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Project.Data.Entities.Area", b =>
                {
                    b.Navigation("AreaDistributors");

                    b.Navigation("AreaUsers");
                });

            modelBuilder.Entity("Project.Data.Entities.Distributor", b =>
                {
                    b.Navigation("AreaDistributors");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Project.Data.Entities.Survey", b =>
                {
                    b.Navigation("SurveyDetails");

                    b.Navigation("Surveyeds");
                });

            modelBuilder.Entity("Project.Data.Entities.Task", b =>
                {
                    b.Navigation("MediaTasks");

                    b.Navigation("TaskDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
